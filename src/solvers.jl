solvers_const = Dict(
    :ARCLDLt_abs => (HessDense, PDataLDLt, solve_modelARCDiagAbs, ()),
    :ARCLDLt_HO_Sham => (
        HessDense,
        PDataLDLt,
        (v, w, x, y, z) -> solve_modelARCDiag_HO(
            v,
            w,
            x,
            y,
            z,
            ho_correction = :Shamanskii,
            λfact = 100.0,
        ),
        (),
    ),
    :ARCLDLt_HO_vs_Nwt => (
        HessDense,
        PDataLDLt,
        (v, w, x, y, z) -> solve_modelARCDiag_HO_vs_Nwt(
            v,
            w,
            x,
            y,
            z,
            λfact = 100.0,
            nwt_res_fact = 0.8,
        ),
        (),
    ),
    :ARCLDLt => (HessDense, PDataLDLt, solve_modelARCDiag, ()),
    # :ARCMA57_abs => (HessSparse, PDataMA57, solve_modelARCDiagAbs, ()),
    # :ARCMA57_Sham_vs_Nwt_λ => (HessSparse, PDataMA57, (v, w, x, y, z) -> solve_modelARCDiag_HO_vs_Nwt(v, w, x, y, z, λfact = 1.0, nwt_res_fact = 0.25, ho_correction = :Shamanskii_MA57), ()),
    # :ARCMA57_Sham_vs_Nwt => (HessSparse, PDataMA57, solve_modelARCDiag, ()),
    # :ARCMA57_Sham_λ => (HessSparse, PDataMA57, (v, w, x, y, z) -> solve_modelARCDiag_HO(v, w, x, y, z, ho_correction = :Shamanskii_MA57, λfact = 1.0), ()),
    # :ARCMA57 => (HessSparse, PDataMA57, solve_modelARCDiag, ()),
    # :ARCMA97_abs => (HessDense, PDataMA97, solve_modelARCDiagAbs, ()),
    # :ARCMA97 => (HessDense, PDataMA97, solve_modelARCDiag, ()),
    :ARCqKdense => (
        HessDense,
        PDataKARC,
        solve_modelKARC,
        [(:shifts => 10.0 .^ (collect(-20.0:1.0:20.0)))],
    ),
    :ARCqKOp => (
        HessOp,
        PDataKARC,
        solve_modelKARC,
        [:shifts => 10.0 .^ (collect(-20.0:1.0:20.0))],
    ),
    :ARCqKsparse => (
        HessSparse,
        PDataKARC,
        solve_modelKARC,
        [:shifts => 10.0 .^ (collect(-20.0:1.0:20.0))],
    ),
    :ARCSpectral_abs => (HessDense, PDataSpectral, solve_modelARCDiagAbs, ()),
    :ARCSpectral => (HessDense, PDataSpectral, solve_modelARCDiag, ()),
    :ST_ARCdense => (HessDense, PDataST, solve_modelST_ARC, ()),
    :ST_ARCOp => (HessOp, PDataST, solve_modelST_ARC, ()),
    :ST_ARCsparse => (HessSparse, PDataST, solve_modelST_ARC, ()),
    :ST_TRdense => (HessDense, PDataST, solve_modelST_TR, ()),
    :ST_TROp => (HessOp, PDataST, solve_modelST_TR, ()),
    :ST_TRsparse => (HessSparse, PDataST, solve_modelST_TR, ()),
    :TRKdense => (HessDense, PDataKTR, solve_modelKTR, ()),
    :TRKOp => (HessOp, PDataKTR, solve_modelKTR, ()),
    :TRKsparse => (HessSparse, PDataKTR, solve_modelKTR, ()),
    :TRLDLt_abs => (HessDense, PDataLDLt, solve_modelTRDiagAbs, ()),
    :TRLDLt_HO_vs_Nwt_λ => (
        HessDense,
        PDataLDLt,
        (v, w, x, y, z) -> solve_modelTRDiag_HO_vs_Nwt_λ(
            v,
            w,
            x,
            y,
            z;
            ho_correction = :Shamanskii,
            nwt_res_fact = 0.25,
            λfact = 1.0,
        ),
        (),
    ),
    :TRLDLt => (HessDense, PDataLDLt, solve_modelTRDiag, ()),
    # :TRMA57_abs => (HessSparse, PDataMA57, solve_modelTRDiagAbs, ()),
    # :TRMA57_Sham_vs_Nwt_λ => (HessSparse, PDataMA57, (v, w, x, y, z) -> solve_modelTRDiag_HO_vs_Nwt_λ(v, w, x, y, z; ho_correction = :Shamanskii_MA57, nwt_res_fact = 0.25, λfact = 1.0), ()),
    # :TRMA57 => (HessSparse, PDataMA57, solve_modelTRDiag, ()),
    # :TRMA97_abs => (HessDense, PDataMA97, solve_modelTRDiagAbs, ()),
    # :TRMA97 => (HessSparse, PDataMA97, solve_modelTRDiag, ()),
    :TRSpectral_abs => (HessDense, PDataSpectral, solve_modelTRDiagAbs, ()),
    :TRSpectral => (HessDense, PDataSpectral, solve_modelTRDiag, ()),
)
